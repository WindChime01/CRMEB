<?php// +----------------------------------------------------------------------// | CRMEB [ CRMEB赋能开发者，助力企业发展 ]// +----------------------------------------------------------------------// | Copyright (c) 2016～2023 https://www.crmeb.com All rights reserved.// +----------------------------------------------------------------------// | Licensed CRMEB并不是自由软件，未经许可不能去掉CRMEB相关版权// +----------------------------------------------------------------------// | Author: CRMEB Team <admin@crmeb.com>// +----------------------------------------------------------------------namespace app\merchant\controller\order;use app\merchant\controller\AuthController;use service\AlipayTradeWapService;use service\FormBuilder as Form;use app\admin\model\user\User;use app\admin\model\user\UserBill;use basic\ModelBasic;use behavior\wap\StoreProductBehavior;use behavior\wechat\PaymentBehavior;use service\HookService;use service\JsonService as Json;use think\Request;use think\Url;use app\merchant\model\order\DataDownloadOrder as DataDownloadOrderModel;use app\merchant\model\download\DataDownloadBuy;use app\admin\model\merchant\MerchantFlowingWater;/** * 订单管理控制器 同一个订单表放在一个控制器 * Class DataDownloadOrder */class DataDownloadOrder extends AuthController{    /**资料订单     * @return mixed     */    public function index()    {        $this->assign([            'year' => getMonth('y'),            'real_name' => $this->request->get('real_name', ''),            'orderCount' => DataDownloadOrderModel::orderCount($this->merchantId)        ]);        return $this->fetch('data_download_order');    }    /**     * 获取头部订单金额等信息     * return json     *     */    public function getBadge()    {        $where = parent::postMore([            ['status', ''],            ['real_name', ''],            ['is_del', 0],            ['data', ''],            ['type', ''],            ['order', '']        ]);        $where['mer_id'] = $this->merchantId;        return Json::successful(DataDownloadOrderModel::getBadge($where));    }    /**     * 获取订单列表     * return json     */    public function data_download_order_list()    {        $where = parent::getMore([            ['status', ''],            ['real_name', $this->request->param('real_name', '')],            ['is_del', 0],            ['data', ''],            ['type', ''],            ['order', ''],            ['page', 1],            ['limit', 20],            ['excel', 0]        ]);        $where['mer_id'] = $this->merchantId;        return Json::successlayui(DataDownloadOrderModel::orderList($where));    }    /**     * 修改退款状态     * @param $id     * @return \think\response\Json|void     */    public function refund_y($id)    {        if (!$id) return $this->failed('数据不存在');        $product = DataDownloadOrderModel::get($id);        if (!$product) return Json::fail('数据不存在!');        if ($product['paid'] == 1) {            $f = array();            $f[] = Form::input('order_id', '退款单号', $product->getData('order_id'))->disabled(1);            $f[] = Form::number('refund_price', '退款金额', $product->getData('pay_price'))->precision(2)->min(0.01);            $f[] = Form::radio('type', '状态', 1)->options([['label' => '直接退款', 'value' => 1]]);            $form = Form::make_post_form('退款处理', $f, Url::build('updateRefundY', array('id' => $id)), 4);            $this->assign(compact('form'));            return $this->fetch('public/form-builder');        } else return Json::fail('数据不存在!');    }    /**退款处理     * @param Request $request     * @param $id     */    public function updateRefundY(Request $request, $id)    {        $data = parent::postMore([            'refund_price',            ['type', 1],        ], $request);        if (!$id) return $this->failed('数据不存在');        $product = DataDownloadOrderModel::get($id);        if (!$product) return Json::fail('数据不存在!');        if ($product['pay_price'] == $product['refund_price']) return Json::fail('已退完支付金额!不能再退款了');        if (!$data['refund_price']) return Json::fail('请输入退款金额');        $refund_price = $data['refund_price'];        $data['refund_price'] = bcadd($data['refund_price'], $product['refund_price'], 2);        $bj = bccomp((float)$product['pay_price'], (float)$data['refund_price'], 2);        if ($bj < 0) return Json::fail('退款金额大于支付金额，请修改退款金额');        if ($data['type'] == 1) {            $data['refund_status'] = 2;        } else if ($data['type'] == 2) {            $data['refund_status'] = 0;        }        $type = $data['type'];        unset($data['type']);        $refund_data['pay_price'] = $product['pay_price'];        $refund_data['refund_price'] = $refund_price;        if ($product['pay_type'] == 'weixin') {            try {                HookService::listen('wechat_pay_order_refund', $product['order_id'], $refund_data, true, PaymentBehavior::class);            } catch (\Exception $e) {                return Json::fail($e->getMessage());            }        } else if ($product['pay_type'] == 'yue') {            ModelBasic::beginTrans();            $res = User::bcInc($product['uid'], 'now_money', $refund_price, 'uid');            ModelBasic::checkTrans($res);            if (!$res) return Json::fail('余额退款失败!');        } else if ($product['pay_type'] == 'zhifubao') {            $res = AlipayTradeWapService::init()->AliPayRefund($product['order_id'], $product['trade_no'], $refund_price, '资料退款', 'refund');            if (empty($res) || $res != 10000) {                return Json::fail('支付宝退款失败!');            }        }        $data['refund_reason_time'] = time();        $resEdit = DataDownloadOrderModel::edit($data, $id);        if ($resEdit) {            $data['type'] = $type;            DataDownloadBuy::where('order_id', $product['order_id'])->delete();            $pay_type = $product['pay_type'] == 'yue' ? 'now_money' : $product['pay_type'];            if ($product['pay_type'] == 'yue') {                $balance = User::where(['uid' => $product['uid']])->value('now_money');            } else {                $balance = 0;            }            UserBill::income('资料退款', $product['uid'], $pay_type, 'pay_data_download_refund', $refund_price, $product['id'], $balance, '订单退款' . floatval($refund_price) . '元');            MerchantFlowingWater::orderRefund($id, $product['mer_id'], 3);            return Json::successful('修改成功!');        } else {            return Json::successful('修改失败!');        }    }    /**订单详情     * @param string $oid     * @return mixed|void     * @throws \think\exception\DbException     */    public function order_info($oid = '')    {        if (!$oid || !($orderInfo = DataDownloadOrderModel::get($oid)))            return $this->failed('订单不存在!');        $userInfo = User::getAllUserinfo($orderInfo['uid']);        $this->assign(compact('orderInfo', 'userInfo'));        return $this->fetch();    }    /**订单删除     * @param int $id     */    public function delete($id = 0)    {        if (!$id) return Json::fail('参数错误!');        $data['is_del'] = 1;        $data['is_system_del'] = 1;        DataDownloadOrderModel::edit($data, $id);        return Json::successful('删除成功!');    }}